name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  # Quality gates and static analysis
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Quality Gates
        run: ./gradlew qualityGates --continue

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            shared/build/reports/
            build/reports/
          retention-days: 30

  # Linux platform testing
  linux-tests:
    name: Linux Tests
    needs: quality-gates
    strategy:
      matrix:
        runner:
          - ubuntu-latest  # x64
          - ubuntu-24.04   # x64 with latest packages
        arch: [x64]
        # Note: GitHub doesn't provide ARM64 Linux runners in the free tier
        # ARM64 testing would require self-hosted runners or paid GitHub Enterprise
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Install Linux Development Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libc6-dev

      - name: Run Linux X64 Tests
        run: ./gradlew linuxX64Test --info

      - name: Upload Linux Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linux-test-results-${{ matrix.runner }}
          path: |
            shared/build/test-results/
            shared/build/reports/tests/
          retention-days: 30

  # Cross-platform compilation verification
  cross-platform-build:
    name: Cross-Platform Build
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build All Targets
        run: ./gradlew build --continue

      - name: Verify Linux Binaries
        run: |
          echo "Verifying Linux X64 binaries..."
          file shared/build/bin/linuxX64/debugTest/test.kexe || echo "Linux X64 test binary not found"

          echo "Verifying Linux ARM64 binaries..."
          file shared/build/bin/linuxArm64/debugTest/test.kexe || echo "Linux ARM64 test binary not found"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-platform-binaries
          path: |
            shared/build/bin/
            shared/build/libs/
          retention-days: 7

  # JVM platform testing (reference implementation)
  jvm-tests:
    name: JVM Tests
    needs: quality-gates
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: ['11', '17', '21']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run JVM Tests
        run: ./gradlew jvmTest

      - name: Upload JVM Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jvm-test-results-${{ matrix.os }}-java${{ matrix.java }}
          path: |
            shared/build/test-results/jvmTest/
            shared/build/reports/tests/jvmTest/
          retention-days: 30

  # JavaScript/Node.js platform testing
  js-tests:
    name: JavaScript Tests
    needs: quality-gates
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['18', '20', '22']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run JavaScript Tests
        run: ./gradlew jsTest

      - name: Run WASM-JS Tests
        run: ./gradlew wasmJsTest

      - name: Upload JS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: js-test-results-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            shared/build/test-results/jsTest/
            shared/build/test-results/wasmJsTest/
            shared/build/reports/tests/
          retention-days: 30

  # Android platform testing
  android-tests:
    name: Android Tests
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Android Unit Tests
        run: ./gradlew testDebugUnitTest testReleaseUnitTest

      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results
          path: |
            shared/build/test-results/testDebugUnitTest/
            shared/build/test-results/testReleaseUnitTest/
            shared/build/reports/tests/
          retention-days: 30

  # Security and dependency scanning
  security-scan:
    name: Security Scan
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run OWASP Dependency Check
        run: ./gradlew dependencyCheckAnalyze
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            shared/build/reports/dependency-check/
          retention-days: 30

  # Final status check
  ci-success:
    name: CI Success
    needs: [quality-gates, linux-tests, cross-platform-build, jvm-tests, js-tests, android-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.quality-gates.result }}" == "success" &&
                "${{ needs.linux-tests.result }}" == "success" &&
                "${{ needs.cross-platform-build.result }}" == "success" &&
                "${{ needs.jvm-tests.result }}" == "success" &&
                "${{ needs.js-tests.result }}" == "success" &&
                "${{ needs.android-tests.result }}" == "success" &&
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            echo "Quality Gates: ${{ needs.quality-gates.result }}"
            echo "Linux Tests: ${{ needs.linux-tests.result }}"
            echo "Cross-Platform Build: ${{ needs.cross-platform-build.result }}"
            echo "JVM Tests: ${{ needs.jvm-tests.result }}"
            echo "JS Tests: ${{ needs.js-tests.result }}"
            echo "Android Tests: ${{ needs.android-tests.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            exit 1
          fi